generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Appointment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId String   @db.ObjectId
  patient   Patient  @relation(fields: [patientId], references: [id])
  doctorId  String?  @db.ObjectId
  doctor    Doctor?  @relation(fields: [doctorId], references: [id])
  examId    String?  @db.ObjectId
  exam      Exam?    @relation(fields: [examId], references: [id])
  date      DateTime @db.Date
  time      String
  type      String
  status    String
  notes     String?
  createdAt DateTime @db.Date
  updatedAt DateTime @db.Date
}

model Attorney {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  address       String
  /// Could not determine type: the field only had null or empty values in the sample set.
  barNumber     Json?
  city          String
  createdAt     DateTime       @db.Date
  email         String
  firstName     String
  lastName      String
  phone         String
  state         String
  updatedAt     DateTime       @db.Date
  userId        String         @unique @db.ObjectId
  user          User           @relation(fields: [userId], references: [id])
  caseManagers  CaseManager[]
  zip           String
}

model Case {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  caseNumber String   @unique
  createdAt  DateTime @db.Date
  filingDate DateTime @db.Date
  notes      String
  patientId  String   @db.ObjectId
  patient    Patient  @relation(fields: [patientId], references: [id])
  status     String
  updatedAt  DateTime @db.Date
}

model CaseManager {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  attorneyId String   @db.ObjectId
  attorney   Attorney @relation(fields: [attorneyId], references: [id])
  createdAt  DateTime @db.Date
  email      String
  firstName  String
  lastName   String
  phone      String
  updatedAt  DateTime @db.Date
}

model Doctor {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  address     String
  clinicName  String
  createdAt   DateTime      @db.Date
  email       String
  faxNumber   String
  hasLogin    Boolean
  /// Could not determine type: the field only had null or empty values in the sample set.
  mapLink     Json?
  name        String
  phoneNumber String
  prefix      String
  status      String
  updatedAt   DateTime      @db.Date
  appointments Appointment[]
}

model Event {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId String?  @db.ObjectId
  patient   Patient? @relation(fields: [patientId], references: [id])
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @db.Date
  updatedAt DateTime @db.Date
}

model Exam {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  category     String
  createdAt    DateTime      @db.Date
  name         String
  status       String
  updatedAt    DateTime      @db.Date
  appointments Appointment[]
  procedures   Procedure[]
  subExams     SubExam[]
}

model ExamType {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @db.Date
  updatedAt DateTime @db.Date
}

model Facility {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  address    String
  city       String
  createdAt  DateTime     @db.Date
  email      String?
  fax        String?
  mapLink    String?
  name       String
  phone      String
  state      String
  status     String
  updatedAt  DateTime     @db.Date
  zip        String
  procedures Procedure[]
}

model Patient {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  address      String?
  altNumber    String?
  city         String?
  createdAt    DateTime      @db.Date
  dateOfBirth  DateTime      @db.Date
  /// Could not determine type: the field only had null or empty values in the sample set.
  doidol       Json?
  email        String?
  firstName    String
  gender       String?
  lastName     String
  /// Could not determine type: the field only had null or empty values in the sample set.
  lawyer       Json?
  /// Could not determine type: the field only had null or empty values in the sample set.
  middleName   Json?
  orderDate    DateTime?     @db.Date
  /// Could not determine type: the field only had null or empty values in the sample set.
  orderFor     Json?
  payerId      String?       @db.ObjectId
  payer        Payer?        @relation(fields: [payerId], references: [id])
  phone        String
  statusId     String        @db.ObjectId
  status       Status        @relation(fields: [statusId], references: [id])
  updatedAt    DateTime      @db.Date
  zip          String?
  appointments Appointment[]
  cases        Case[]
  procedures   Procedure[]
  events       Event[]
}

model Payer {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @db.Date
  isActive  Boolean
  name      String    @unique
  updatedAt DateTime  @db.Date
  patients  Patient[]
}

model Physician {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  /// Could not determine type: the field only had null or empty values in the sample set.
  address     Json?
  /// Could not determine type: the field only had null or empty values in the sample set.
  clinicName  Json?
  createdAt   DateTime     @db.Date
  email       String       @unique
  /// Could not determine type: the field only had null or empty values in the sample set.
  faxNumber   Json?
  isActive    Boolean
  /// Could not determine type: the field only had null or empty values in the sample set.
  mapLink     Json?
  name        String
  npiNumber   String?
  phoneNumber String?
  prefix      String?
  status      String
  suffix      String?
  updatedAt   DateTime     @db.Date
  procedures  Procedure[]
}

model Procedure {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime   @db.Date
  examId       String     @db.ObjectId
  exam         Exam       @relation(fields: [examId], references: [id])
  facilityId   String     @db.ObjectId
  facility     Facility   @relation(fields: [facilityId], references: [id])
  isCompleted  Boolean
  /// Could not determine type: the field only had null or empty values in the sample set.
  lop          Json?
  patientId    String     @db.ObjectId
  patient      Patient    @relation(fields: [patientId], references: [id])
  physicianId  String     @db.ObjectId
  physician    Physician  @relation(fields: [physicianId], references: [id])
  scheduleDate DateTime   @db.Date
  scheduleTime String
  statusId     String     @db.ObjectId
  status       Status     @relation(fields: [statusId], references: [id])
  updatedAt    DateTime   @db.Date
}

model Status {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  color      String
  createdAt  DateTime     @db.Date
  name       String       @unique
  updatedAt  DateTime     @db.Date
  patients   Patient[]
  procedures Procedure[]
}

model SubExam {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @db.Date
  examId    String   @db.ObjectId
  exam      Exam     @relation(fields: [examId], references: [id])
  name      String
  price     Float
  updatedAt DateTime @db.Date
}

model Task {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  assignedToId String   @db.ObjectId
  assignedTo   User     @relation(fields: [assignedToId], references: [id])
  createdAt    DateTime @db.Date
  description  String
  dueDate      DateTime @db.Date
  priority     String
  status       String
  title        String
  updatedAt    DateTime @db.Date
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @db.Date
  email        String   @unique
  name         String
  password     String
  role         String
  updatedAt    DateTime @db.Date
  attorney     Attorney?
  assignedTasks Task[]
  events       Event[]
}
